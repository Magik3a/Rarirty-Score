@page "/"
@using Microsoft.Extensions.Logging
@using System.Globalization
@inject ILogger<Index> Logger
@inject HttpClient Http

<h1>Check Rarity</h1>

<EditForm Model="@checkRarityFormModel" OnValidSubmit="@HandleValidSubmit" >
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="contract">Terranauts (TRNT) Contract Address:</label>

        
        <InputText id="contract" class="form-control" disabled @bind-Value="checkRarityFormModel.WalletAddress"/>
  
    </div>
    <div class="form-group">
    <label for="terranautId">Terranaut Id:</label>
 
        <InputNumber id="terranautId" @bind-Value="checkRarityFormModel.TerranautId" />
  

    
    </div>
    <button class="btn btn-info" disabled="@buttonDisables" type="submit">Submit</button>
</EditForm>

<hr />
@if (terraContractResult != null)
{
    <div class="row">
    <div class="card bg-light col-lg-12" style="width: 22rem">
        <div class="card-body">
            <h3 class="card-title">Rarity score</h3>
            
            <div class="row">
                <div class="col-md-4">
                    
                    <img class="img-thumbnail" src="https://cloudflare-ipfs.com/ipfs/@terraContractResult.result?.image.Split('/').Last()" />
                    <div class="alert alert-dark" role="alert">
                        <strong>Average Rarity: </strong>  @(averagePercent.ToString("F2", CultureInfo.InvariantCulture) + "%" )
                    </div>
                    

                </div>
                <div class="col-md-8">
                    <ul class="list-group">
                        Owner Address:

                        <li class="list-group-item">@terraContractResult.result?.owner</li>
                    </ul>
                    <ul class="list-group">
                        Properties
                        @foreach (var metadata in mappedMetadataResult.Metadata)
                        {
                            <li class="list-group-item">
                                @metadata.PropertyType - @metadata.Name
                                <span class="badge badge-secondary float-right">@metadata.Rarity %</span>
                                <div class="progress ">
                                    <div class="progress-bar" role="progressbar" style="width: 75%" aria-valuenow="15" aria-valuemin="0" aria-valuemax="100">
                                        @metadata.TotalCount
                                    </div>
                                    <div class="progress-bar bg-info" role="progressbar" style="width: 25%" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100">
                                        @metadata.Count
                                    </div>
                                </div>
                            </li>

                        }
                    </ul>
                </div>
                </div>
        </div>
    </div></div>
}
@code {
    private CheckRarityFormModel checkRarityFormModel = new() { WalletAddress = "terra1whyze49j9d0672pleaflk0wfufxrh8l0at2h8q" };
    private TerraContractResult terraContractResult;
    private bool buttonDisables;

    private List<Dictionary<string, string>> metadataResult;

    private MetadataResult mappedMetadataResult = new();

    private decimal averagePercent = 0;
    private async void HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");
        buttonDisables = true;
        try
        {
            var terraUrl = $"https://lcd.terra.dev/wasm/contracts/{checkRarityFormModel.WalletAddress}/store?query_msg=%7B%22nft_additional_info%22:%7B%22token_id%22:%22{checkRarityFormModel.TerranautId}%22%7D%7D";

            terraContractResult = await Http.GetFromJsonAsync<TerraContractResult>(terraUrl);
            // Get contract 
            metadataResult = System.Text.Json.JsonSerializer.Deserialize<List<Dictionary<string, string>>>(terraContractResult.result.metadata);
            mappedMetadataResult = MetadataResult.MapMetadata(metadataResult);

            // Get all attributes
            var jsonAttributes = await Http.GetFromJsonAsync<Dictionary<string, Dictionary<string, Dictionary<string, decimal>>>>("attributes/attributes.json");
            var attributes = AttributesResult.MapAttributes(jsonAttributes);

            // Add rarity to the list
            mappedMetadataResult = MetadataResult.MapRarity(mappedMetadataResult, attributes);

            averagePercent = mappedMetadataResult.Metadata.Select(av => av.Rarity).Average();

        }
        finally
        {
             buttonDisables = false;
             this.StateHasChanged();
        }
        
    }

}