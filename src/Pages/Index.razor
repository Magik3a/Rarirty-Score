@page "/"
@using Microsoft.Extensions.Logging
@using System.Globalization
@inject ILogger<Index> Logger
@inject HttpClient Http

<h1>Check Rarity</h1>

<EditForm Model="@checkRarityFormModel" OnValidSubmit="@HandleValidSubmit" >
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="contract">NFT Contract Address:</label>

        
        @*<InputText id="contract" class="form-control" disabled @bind-Value="checkRarityFormModel.WalletAddress"/>*@
        <InputSelect class="" @bind-Value="contractAddress" bind-Value:event="@ContractAddressChanged()">
            @foreach (var contract in contractAddresses)
            {
                <option class="">@contract.Key</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
    <label for="terranautId">Terranaut Id:</label>
 
        <InputNumber id="terranautId" @bind-Value="checkRarityFormModel.TerranautId" />
  
         
    
    </div>
    <button class="btn btn-info" disabled="@buttonDisables" type="submit">Submit</button>
</EditForm>

<hr />
@if (terraContractResult != null)
{
    <div class="row">
    <div class="card bg-light col-lg-12" style="width: 22rem">
        <div class="card-body">
            <h3 class="card-title">Rarity score</h3>
            
            <div class="row">
                <div class="col-lg-4">
                    
                    <img class="img-thumbnail" src="https://cloudflare-ipfs.com/ipfs/@terraContractResult.result?.image.Split('/').Last()" />

                    <div class="alert alert-dark" role="alert" style="margin-top:20px;">
                        <strong>Average Rarity: </strong>  @(averagePercent.ToString("F2", CultureInfo.InvariantCulture) + "%" )
                    </div>
                    <div class="alert alert-info" role="alert">
                        <strong>Rarest Trait: </strong>  @(minimumPercent.ToString("F2", CultureInfo.InvariantCulture) + "%" + $" ({minimumCount}/{maximumCount})" )
                    </div>
                    <div class="alert alert-success" role="alert">
                        <strong>NFT Score: @(mappedMetadataResult.TotalRarityScore.ToString("F2", CultureInfo.InvariantCulture))</strong>

                    </div>
                </div>
                <div class="col-lg-8">
                    <ul class="list-group">
                        Owner Address:

                        <li class="list-group-item">@terraContractResult.result?.owner</li>
                    </ul>
                    <ul class="list-group">
                        Properties
                        @foreach (var metadata in mappedMetadataResult.Metadata)
                        {
                            <li class="list-group-item align-content-center">
                                <div class="row">
                                <div class="col-md-3">
                                    <span class="badge badge-light">@metadata.PropertyType</span>
                                </div>
                                <div class="col-md-4 text-center">
                                    <span class="">@metadata.Name</span>
                                </div>
                                    <div class="col-md-5  float-right text-right">
                                        <span class="badge badge-secondary float-right ">@metadata.Rarity %</span>

                                        <span class="badge badge-warning float-right">Floor price for trait: 
                                            @(metadata.FloorPrice.ToString("F2", CultureInfo.InvariantCulture) + " Luna" )
                                            </span>
                                    </div>
                                <div class="col-md-12">

                                    <div class="progress ">
                                        <div class="progress-bar bg-info" role="progressbar" style="width: @(Math.Abs(metadata.Rarity - 100))%" aria-valuenow="@(Math.Abs(metadata.Rarity - 100))" aria-valuemin="0" aria-valuemax="100">
                                            @metadata.TotalCount
                                        </div>
                                        <div class="progress-bar bg-primary" role="progressbar" style="width: @(metadata.Rarity)%" aria-valuenow="@metadata.Rarity" aria-valuemin="0" aria-valuemax="100">
                                            @metadata.Count
                                        </div>
                                    </div>
                                </div>
                                </div>

                            </li>

                        }
                    </ul>
                </div>
                </div>
        </div>
    </div></div>
}
@code {
    private Dictionary<string, string> contractAddresses = new();
    private string contractAddress ;

    private CheckRarityFormModel checkRarityFormModel = new();

    private TerraContractResult terraContractResult;
    private bool buttonDisables;

    private List<Dictionary<string, string>> metadataResult;

    private MetadataResult mappedMetadataResult = new();

    private decimal averagePercent = 0;
    private decimal minimumPercent = 0;
    private decimal minimumCount = 0;
    private decimal maximumCount = 0;
    
    protected override async Task OnInitializedAsync()
    {
        var jsonContracts = await Http.GetFromJsonAsync<Dictionary<string, string>>("contracts/nftcontracts.json");
        foreach (var jsonContract in jsonContracts)
        {
            contractAddresses.Add(jsonContract.Key, jsonContract.Value);
        }
        contractAddress = jsonContracts.First().Key;
        checkRarityFormModel.WalletAddress =jsonContracts.First().Value;
    }

    private Task ContractAddressChanged()
    {
        Logger.LogInformation($"Contract Address Changed: {contractAddress}");
        if(!string.IsNullOrEmpty(contractAddress))
        checkRarityFormModel.WalletAddress = contractAddresses[contractAddress];

        return Task.CompletedTask;
    }

    public async Task<decimal> GetTraitsFloorPrice()
    {
        
        

        foreach (var mappedMetadata in mappedMetadataResult.Metadata)
        {
            // Get floor price per trait from randomearth.io
            var sortString = "sort=price.asc";
            await Task.Delay(500);

            var randomearthUrl = $"https://randomearth.io/api/items?collection_addr={checkRarityFormModel.WalletAddress}&{sortString}&page=1&Face_={mappedMetadata.Name}";

            HttpClient httpClient = Http;
            try
            {
                
                var marketResult = await httpClient.GetFromJsonAsync<RandomearthModels>(randomearthUrl);
                if (marketResult != null && marketResult.Items.Any())
                {
                    var price = marketResult.Items.FirstOrDefault()?.Price;
                    if (price != null) mappedMetadata.FloorPrice = (decimal) price/100000;
                }
            }
            catch (Exception e)
            {
                Logger.LogInformation(e.Message);
            }

            this.StateHasChanged();
        }
        return 0;

    }

    private async void HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");
        buttonDisables = true;
        try
        {
            var terraUrl = $"https://lcd.terra.dev/wasm/contracts/{checkRarityFormModel.WalletAddress}/store?query_msg=%7B%22nft_additional_info%22:%7B%22token_id%22:%22{checkRarityFormModel.TerranautId}%22%7D%7D";

            terraContractResult = await Http.GetFromJsonAsync<TerraContractResult>(terraUrl);
            // Get contract 
            metadataResult = System.Text.Json.JsonSerializer.Deserialize<List<Dictionary<string, string>>>(terraContractResult.result.metadata);
            mappedMetadataResult = MetadataResult.MapMetadata(metadataResult);
             
            // Get all attributes
            var jsonAttributes = await Http.GetFromJsonAsync<Dictionary<string, Dictionary<string, Dictionary<string, decimal>>>>("attributes/attributes.json");
            var attributes = AttributesResult.MapAttributes(jsonAttributes);

            // Add rarity to the list
            mappedMetadataResult = MetadataResult.MapRarity(mappedMetadataResult, attributes);

            averagePercent = mappedMetadataResult.Metadata.Select(av => av.Rarity).Average();
            minimumPercent = mappedMetadataResult.Metadata.Where(av => av.Rarity > 0).Select(av => av.Rarity).Min();

            // Max and Min for rarest nft trait 
            var minimumRarityIndex = mappedMetadataResult.Metadata.Where(av => av.Rarity > 0).Min(av => av.Rarity);
            minimumCount = mappedMetadataResult.Metadata.Where(av => av.Rarity == minimumRarityIndex).Select(av => av.Count).FirstOrDefault();
            maximumCount = mappedMetadataResult.Metadata.Where(av => av.Rarity == minimumRarityIndex).Select(av => av.TotalCount).FirstOrDefault();

            
            Task.Run(() => GetTraitsFloorPrice());
        }
        finally
        {
             buttonDisables = false;
             this.StateHasChanged();
        }
        
    }

}